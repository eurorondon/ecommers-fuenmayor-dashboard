type Review {
  name: String
  rating: Float
  comment: String
  user: ID
  createdAt: String
  updatedAt: String
}

type Photo {
  url: String
  publicId: String
}

type Product {
  name: String!
  photo: [Photo]
  categories: [String]
  color: String
  description: String
  reviews: [Review]
  rating: Float
  numReviews: Int
  price: Float!
  countInStock: Int
  createdAt: String
  updatedAt: String
  inOffer: Boolean
  discountPercentage: Float
  bestSellers: Boolean
  id: ID!
}

type Categories {
  id: ID!
  categoryName: String
  description: String
  imgUrl: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

input PhotoInput {
  url: String
  publicId: String
}

input ReviewInput {
  name: String
  rating: Float
  comment: String
  user: ID
  createdAt: String
  updatedAt: String
}

type ModelProductConnection {
  items: [Product]!
  nextToken: String
}

input ModelProductFilterInput {
  name: ModelStringInput
  categories: ModelStringInput
  color: ModelStringInput
  description: ModelStringInput
  rating: ModelFloatInput
  numReviews: ModelIntInput
  price: ModelFloatInput
  countInStock: ModelIntInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  inOffer: ModelBooleanInput
  discountPercentage: ModelFloatInput
  bestSellers: ModelBooleanInput
  id: ModelIDInput
  and: [ModelProductFilterInput]
  or: [ModelProductFilterInput]
  not: ModelProductFilterInput
}

type Query {
  getProduct(id: ID!): Product
  listProducts(filter: ModelProductFilterInput, limit: Int, nextToken: String): ModelProductConnection
  getCategories(id: ID!): Categories
  listCategories(filter: ModelCategoriesFilterInput, limit: Int, nextToken: String): ModelCategoriesConnection
}

input ModelProductConditionInput {
  name: ModelStringInput
  categories: ModelStringInput
  color: ModelStringInput
  description: ModelStringInput
  rating: ModelFloatInput
  numReviews: ModelIntInput
  price: ModelFloatInput
  countInStock: ModelIntInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  inOffer: ModelBooleanInput
  discountPercentage: ModelFloatInput
  bestSellers: ModelBooleanInput
  and: [ModelProductConditionInput]
  or: [ModelProductConditionInput]
  not: ModelProductConditionInput
}

input CreateProductInput {
  name: String!
  photo: [PhotoInput]
  categories: [String]
  color: String
  description: String
  reviews: [ReviewInput]
  rating: Float
  numReviews: Int
  price: Float!
  countInStock: Int
  createdAt: String
  updatedAt: String
  inOffer: Boolean
  discountPercentage: Float
  bestSellers: Boolean
  id: ID
}

input UpdateProductInput {
  name: String
  photo: [PhotoInput]
  categories: [String]
  color: String
  description: String
  reviews: [ReviewInput]
  rating: Float
  numReviews: Int
  price: Float
  countInStock: Int
  createdAt: String
  updatedAt: String
  inOffer: Boolean
  discountPercentage: Float
  bestSellers: Boolean
  id: ID!
}

input DeleteProductInput {
  id: ID!
}

type Mutation {
  createProduct(input: CreateProductInput!, condition: ModelProductConditionInput): Product
  updateProduct(input: UpdateProductInput!, condition: ModelProductConditionInput): Product
  deleteProduct(input: DeleteProductInput!, condition: ModelProductConditionInput): Product
  createCategories(input: CreateCategoriesInput!, condition: ModelCategoriesConditionInput): Categories
  updateCategories(input: UpdateCategoriesInput!, condition: ModelCategoriesConditionInput): Categories
  deleteCategories(input: DeleteCategoriesInput!, condition: ModelCategoriesConditionInput): Categories
}

input ModelSubscriptionProductFilterInput {
  name: ModelSubscriptionStringInput
  categories: ModelSubscriptionStringInput
  color: ModelSubscriptionStringInput
  description: ModelSubscriptionStringInput
  rating: ModelSubscriptionFloatInput
  numReviews: ModelSubscriptionIntInput
  price: ModelSubscriptionFloatInput
  countInStock: ModelSubscriptionIntInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  inOffer: ModelSubscriptionBooleanInput
  discountPercentage: ModelSubscriptionFloatInput
  bestSellers: ModelSubscriptionBooleanInput
  id: ModelSubscriptionIDInput
  and: [ModelSubscriptionProductFilterInput]
  or: [ModelSubscriptionProductFilterInput]
}

type Subscription {
  onCreateProduct(filter: ModelSubscriptionProductFilterInput): Product @aws_subscribe(mutations: ["createProduct"])
  onUpdateProduct(filter: ModelSubscriptionProductFilterInput): Product @aws_subscribe(mutations: ["updateProduct"])
  onDeleteProduct(filter: ModelSubscriptionProductFilterInput): Product @aws_subscribe(mutations: ["deleteProduct"])
  onCreateCategories(filter: ModelSubscriptionCategoriesFilterInput): Categories @aws_subscribe(mutations: ["createCategories"])
  onUpdateCategories(filter: ModelSubscriptionCategoriesFilterInput): Categories @aws_subscribe(mutations: ["updateCategories"])
  onDeleteCategories(filter: ModelSubscriptionCategoriesFilterInput): Categories @aws_subscribe(mutations: ["deleteCategories"])
}

type ModelCategoriesConnection {
  items: [Categories]!
  nextToken: String
}

input ModelCategoriesFilterInput {
  id: ModelIDInput
  categoryName: ModelStringInput
  description: ModelStringInput
  imgUrl: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelCategoriesFilterInput]
  or: [ModelCategoriesFilterInput]
  not: ModelCategoriesFilterInput
}

input ModelCategoriesConditionInput {
  categoryName: ModelStringInput
  description: ModelStringInput
  imgUrl: ModelStringInput
  and: [ModelCategoriesConditionInput]
  or: [ModelCategoriesConditionInput]
  not: ModelCategoriesConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateCategoriesInput {
  id: ID
  categoryName: String
  description: String
  imgUrl: String
}

input UpdateCategoriesInput {
  id: ID!
  categoryName: String
  description: String
  imgUrl: String
}

input DeleteCategoriesInput {
  id: ID!
}

input ModelSubscriptionCategoriesFilterInput {
  id: ModelSubscriptionIDInput
  categoryName: ModelSubscriptionStringInput
  description: ModelSubscriptionStringInput
  imgUrl: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionCategoriesFilterInput]
  or: [ModelSubscriptionCategoriesFilterInput]
}
